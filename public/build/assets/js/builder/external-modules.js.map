{"version":3,"sources":["bootstrap-colorpicker-module.js"],"names":[],"mappingsfile":"external-modules.js","sourcesContent":["angular.module('colorpicker.module', [])\n    .factory('Helper', function () {\n      'use strict';\n      return {\n        closestSlider: function (elem) {\n          var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\n          if (matchesSelector.bind(elem)('I')) {\n            return elem.parentNode;\n          }\n          return elem;\n        },\n        getOffset: function (elem, fixedPosition) {\n          var\n            scrollX = 0,\n            scrollY = 0,\n            rect = elem.getBoundingClientRect();\n          while (elem && !isNaN(elem.offsetLeft) && !isNaN(elem.offsetTop)) {\n            if (!fixedPosition && elem.tagName === 'BODY') {\n              scrollX += document.documentElement.scrollLeft || elem.scrollLeft;\n              scrollY += document.documentElement.scrollTop || elem.scrollTop;\n            } else {\n              scrollX += elem.scrollLeft;\n              scrollY += elem.scrollTop;\n            }\n            elem = elem.offsetParent;\n          }\n          return {\n            top: rect.top + window.pageYOffset,\n            left: rect.left + window.pageXOffset,\n            scrollX: scrollX,\n            scrollY: scrollY\n          };\n        },\n        // a set of RE's that can match strings and generate color tuples. https://github.com/jquery/jquery-color/\n        stringParsers: [\n          {\n            re: /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\n            parse: function (execResult) {\n              return [\n                execResult[1],\n                execResult[2],\n                execResult[3],\n                execResult[4]\n              ];\n            }\n          },\n          {\n            re: /rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\n            parse: function (execResult) {\n              return [\n                2.55 * execResult[1],\n                2.55 * execResult[2],\n                2.55 * execResult[3],\n                execResult[4]\n              ];\n            }\n          },\n          {\n            re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,\n            parse: function (execResult) {\n              return [\n                parseInt(execResult[1], 16),\n                parseInt(execResult[2], 16),\n                parseInt(execResult[3], 16)\n              ];\n            }\n          },\n          {\n            re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,\n            parse: function (execResult) {\n              return [\n                parseInt(execResult[1] + execResult[1], 16),\n                parseInt(execResult[2] + execResult[2], 16),\n                parseInt(execResult[3] + execResult[3], 16)\n              ];\n            }\n          }\n        ]\n      };\n    })\n    .factory('Color', ['Helper', function (Helper) {\n      'use strict';\n      return {\n        value: {\n          h: 1,\n          s: 1,\n          b: 1,\n          a: 1\n        },\n        // translate a format from Color object to a string\n        'rgb': function () {\n          var rgb = this.toRGB();\n          return 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';\n        },\n        'rgba': function () {\n          var rgb = this.toRGB();\n          return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')';\n        },\n        'hex': function () {\n          return  this.toHex();\n        },\n\n        // HSBtoRGB from RaphaelJS\n        RGBtoHSB: function (r, g, b, a) {\n          r /= 255;\n          g /= 255;\n          b /= 255;\n\n          var H, S, V, C;\n          V = Math.max(r, g, b);\n          C = V - Math.min(r, g, b);\n          H = (C === 0 ? null :\n              V === r ? (g - b) / C :\n                  V === g ? (b - r) / C + 2 :\n                      (r - g) / C + 4\n              );\n          H = ((H + 360) % 6) * 60 / 360;\n          S = C === 0 ? 0 : C / V;\n          return {h: H || 1, s: S, b: V, a: a || 1};\n        },\n\n        //parse a string to HSB\n        setColor: function (val) {\n          val = (val) ? val.toLowerCase() : val;\n          for (var key in Helper.stringParsers) {\n            if (Helper.stringParsers.hasOwnProperty(key)) {\n              var parser = Helper.stringParsers[key];\n              var match = parser.re.exec(val),\n                  values = match && parser.parse(match);\n              if (values) {\n                this.value = this.RGBtoHSB.apply(null, values);\n                return false;\n              }\n            }\n          }\n        },\n\n        setHue: function (h) {\n          this.value.h = 1 - h;\n        },\n\n        setSaturation: function (s) {\n          this.value.s = s;\n        },\n\n        setLightness: function (b) {\n          this.value.b = 1 - b;\n        },\n\n        setAlpha: function (a) {\n          this.value.a = parseInt((1 - a) * 100, 10) / 100;\n        },\n\n        // HSBtoRGB from RaphaelJS\n        // https://github.com/DmitryBaranovskiy/raphael/\n        toRGB: function (h, s, b, a) {\n          if (!h) {\n            h = this.value.h;\n            s = this.value.s;\n            b = this.value.b;\n          }\n          h *= 360;\n          var R, G, B, X, C;\n          h = (h % 360) / 60;\n          C = b * s;\n          X = C * (1 - Math.abs(h % 2 - 1));\n          R = G = B = b - C;\n\n          h = ~~h;\n          R += [C, X, 0, 0, X, C][h];\n          G += [X, C, C, X, 0, 0][h];\n          B += [0, 0, X, C, C, X][h];\n          return {\n            r: Math.round(R * 255),\n            g: Math.round(G * 255),\n            b: Math.round(B * 255),\n            a: a || this.value.a\n          };\n        },\n\n        toHex: function (h, s, b, a) {\n          var rgb = this.toRGB(h, s, b, a);\n          return '#' + ((1 << 24) | (parseInt(rgb.r, 10) << 16) | (parseInt(rgb.g, 10) << 8) | parseInt(rgb.b, 10)).toString(16).substr(1);\n        }\n      };\n    }])\n    .factory('Slider', ['Helper', function (Helper) {\n      'use strict';\n      var\n          slider = {\n            maxLeft: 0,\n            maxTop: 0,\n            callLeft: null,\n            callTop: null,\n            knob: {\n              top: 0,\n              left: 0\n            }\n          },\n          pointer = {};\n\n      return {\n        getSlider: function() {\n          return slider;\n        },\n        getLeftPosition: function(event) {\n          return Math.max(0, Math.min(slider.maxLeft, slider.left + ((event.pageX || pointer.left) - pointer.left)));\n        },\n        getTopPosition: function(event) {\n          return Math.max(0, Math.min(slider.maxTop, slider.top + ((event.pageY || pointer.top) - pointer.top)));\n        },\n        setSlider: function (event, fixedPosition) {\n          var\n            target = Helper.closestSlider(event.target),\n            targetOffset = Helper.getOffset(target, fixedPosition),\n            rect = target.getBoundingClientRect(),\n            offsetX = event.clientX - rect.left,\n            offsetY = event.clientY - rect.top;\n\n          slider.knob = target.children[0].style;\n          slider.left = event.pageX - targetOffset.left - window.pageXOffset + targetOffset.scrollX;\n          slider.top = event.pageY - targetOffset.top - window.pageYOffset + targetOffset.scrollY;\n\n          pointer = {\n            left: event.pageX - (offsetX - slider.left),\n            top: event.pageY - (offsetY - slider.top)\n          };\n        },\n        setSaturation: function(event, fixedPosition) {\n          slider = {\n            maxLeft: 100,\n            maxTop: 100,\n            callLeft: 'setSaturation',\n            callTop: 'setLightness'\n          };\n          this.setSlider(event, fixedPosition);\n        },\n        setHue: function(event, fixedPosition) {\n          slider = {\n            maxLeft: 0,\n            maxTop: 100,\n            callLeft: false,\n            callTop: 'setHue'\n          };\n          this.setSlider(event, fixedPosition);\n        },\n        setAlpha: function(event, fixedPosition) {\n          slider = {\n            maxLeft: 0,\n            maxTop: 100,\n            callLeft: false,\n            callTop: 'setAlpha'\n          };\n          this.setSlider(event, fixedPosition);\n        },\n        setKnob: function(top, left) {\n          slider.knob.top = top + 'px';\n          slider.knob.left = left + 'px';\n        }\n      };\n    }])\n    .directive('colorpicker', ['$document', '$compile', 'Color', 'Slider', 'Helper', function ($document, $compile, Color, Slider, Helper) {\n      'use strict';\n      return {\n        require: '?ngModel',\n        restrict: 'A',\n        link: function ($scope, elem, attrs, ngModel) {\n          var\n              thisFormat = attrs.colorpicker ? attrs.colorpicker : 'hex',\n              position = angular.isDefined(attrs.colorpickerPosition) ? attrs.colorpickerPosition : 'bottom',\n              inline = angular.isDefined(attrs.colorpickerInline) ? attrs.colorpickerInline : false,\n              fixedPosition = angular.isDefined(attrs.colorpickerFixedPosition) ? attrs.colorpickerFixedPosition : false,\n              target = angular.isDefined(attrs.colorpickerParent) ? elem.parent() : angular.element(document.body),\n              withInput = angular.isDefined(attrs.colorpickerWithInput) ? attrs.colorpickerWithInput : false,\n              inputTemplate = withInput ? '<input type=\"text\" name=\"colorpicker-input\" spellcheck=\"false\">' : '',\n              closeButton = !inline ? '<button type=\"button\" class=\"close close-colorpicker\">&times;</button>' : '',\n              template =\n                  '<div class=\"colorpicker dropdown\">' +\n                      '<div class=\"dropdown-menu\">' +\n                      '<colorpicker-saturation><i></i></colorpicker-saturation>' +\n                      '<colorpicker-hue><i></i></colorpicker-hue>' +\n                      '<colorpicker-alpha><i></i></colorpicker-alpha>' +\n                      '<colorpicker-preview></colorpicker-preview>' +\n                      inputTemplate +\n                      closeButton +\n                      '</div>' +\n                      '</div>',\n              colorpickerTemplate = angular.element(template),\n              pickerColor = Color,\n              sliderAlpha,\n              sliderHue = colorpickerTemplate.find('colorpicker-hue'),\n              sliderSaturation = colorpickerTemplate.find('colorpicker-saturation'),\n              colorpickerPreview = colorpickerTemplate.find('colorpicker-preview'),\n              pickerColorPointers = colorpickerTemplate.find('i');\n\n          $compile(colorpickerTemplate)($scope);\n\n          if (withInput) {\n            var pickerColorInput = colorpickerTemplate.find('input');\n            pickerColorInput\n                .on('mousedown', function(event) {\n                  event.stopPropagation();\n                })\n              .on('keyup', function() {\n                var newColor = this.value;\n                elem.val(newColor);\n                if (ngModel && ngModel.$modelValue !== newColor) {\n                  $scope.$apply(ngModel.$setViewValue(newColor));\n                  update(true);\n                }\n              });\n          }\n\n          function bindMouseEvents() {\n            $document.on('mousemove', mousemove);\n            $document.on('mouseup', mouseup);\n          }\n\n          if (thisFormat === 'rgba') {\n            colorpickerTemplate.addClass('alpha');\n            sliderAlpha = colorpickerTemplate.find('colorpicker-alpha');\n            sliderAlpha\n                .on('click', function(event) {\n                  Slider.setAlpha(event, fixedPosition);\n                  mousemove(event);\n                })\n                .on('mousedown', function(event) {\n                  Slider.setAlpha(event, fixedPosition);\n                  bindMouseEvents();\n                })\n                .on('mouseup', function(event){\n                  emitEvent('colorpicker-selected-alpha');\n                });\n          }\n\n          sliderHue\n              .on('click', function(event) {\n                Slider.setHue(event, fixedPosition);\n                mousemove(event);\n              })\n              .on('mousedown', function(event) {\n                Slider.setHue(event, fixedPosition);\n                bindMouseEvents();\n              })\n              .on('mouseup', function(event){\n                emitEvent('colorpicker-selected-hue');\n              });\n\n          sliderSaturation\n              .on('click', function(event) {\n                Slider.setSaturation(event, fixedPosition);\n                mousemove(event);\n                if (angular.isDefined(attrs.colorpickerCloseOnSelect)) {\n                  hideColorpickerTemplate();\n                }\n              })\n              .on('mousedown', function(event) {\n                Slider.setSaturation(event, fixedPosition);\n                bindMouseEvents();\n              })\n              .on('mouseup', function(event){\n                emitEvent('colorpicker-selected-saturation');\n              });\n\n          if (fixedPosition) {\n            colorpickerTemplate.addClass('colorpicker-fixed-position');\n          }\n\n          colorpickerTemplate.addClass('colorpicker-position-' + position);\n          if (inline === 'true') {\n            colorpickerTemplate.addClass('colorpicker-inline');\n          }\n\n          target.append(colorpickerTemplate);\n\n          if (ngModel) {\n            ngModel.$render = function () {\n              elem.val(ngModel.$viewValue);\n\n              update();\n            };\n          }\n\n          elem.on('blur keyup change', function() {\n            update();\n          });\n\n          elem.on('$destroy', function() {\n            colorpickerTemplate.remove();\n          });\n\n          function previewColor() {\n            try {\n              colorpickerPreview.css('backgroundColor', pickerColor[thisFormat]());\n            } catch (e) {\n              colorpickerPreview.css('backgroundColor', pickerColor.toHex());\n            }\n            sliderSaturation.css('backgroundColor', pickerColor.toHex(pickerColor.value.h, 1, 1, 1));\n            if (thisFormat === 'rgba') {\n              sliderAlpha.css.backgroundColor = pickerColor.toHex();\n            }\n          }\n\n          function mousemove(event) {\n            var \n                left = Slider.getLeftPosition(event),\n                top = Slider.getTopPosition(event),\n                slider = Slider.getSlider();\n\n            Slider.setKnob(top, left);\n\n            if (slider.callLeft) {\n              pickerColor[slider.callLeft].call(pickerColor, left / 100);\n            }\n            if (slider.callTop) {\n              pickerColor[slider.callTop].call(pickerColor, top / 100);\n            }\n            previewColor();\n            var newColor = pickerColor[thisFormat]();\n            elem.val(newColor);\n            if (ngModel) {\n              $scope.$apply(ngModel.$setViewValue(newColor));\n            }\n            if (withInput) {\n              pickerColorInput.val(newColor);\n            }\n            return false;\n          }\n\n          function mouseup() {\n            emitEvent('colorpicker-selected');\n            $document.off('mousemove', mousemove);\n            $document.off('mouseup', mouseup);\n          }\n\n          function update(omitInnerInput) {\n            pickerColor.setColor(elem.val());\n            if (withInput && !omitInnerInput) {\n              pickerColorInput.val(elem.val());\n            }\n            pickerColorPointers.eq(0).css({\n              left: pickerColor.value.s * 100 + 'px',\n              top: 100 - pickerColor.value.b * 100 + 'px'\n            });\n            pickerColorPointers.eq(1).css('top', 100 * (1 - pickerColor.value.h) + 'px');\n            pickerColorPointers.eq(2).css('top', 100 * (1 - pickerColor.value.a) + 'px');\n            previewColor();\n          }\n\n          function getColorpickerTemplatePosition() {\n            var\n                positionValue,\n                positionOffset = Helper.getOffset(elem[0]);\n\n            if(angular.isDefined(attrs.colorpickerParent)) {\n              positionOffset.left = 0;\n              positionOffset.top = 0;\n            }\n\n            if (position === 'top') {\n              positionValue =  {\n                'top': positionOffset.top - 147,\n                'left': positionOffset.left\n              };\n            } else if (position === 'right') {\n              positionValue = {\n                'top': positionOffset.top,\n                'left': positionOffset.left + 126\n              };\n            } else if (position === 'bottom') {\n              positionValue = {\n                'top': positionOffset.top + elem[0].offsetHeight + 2,\n                'left': positionOffset.left\n              };\n            } else if (position === 'left') {\n              positionValue = {\n                'top': positionOffset.top,\n                'left': positionOffset.left - 150\n              };\n            }\n            return {\n              'top': positionValue.top + 'px',\n              'left': positionValue.left + 'px'\n            };\n          }\n\n          function documentMousedownHandler() {\n            hideColorpickerTemplate();\n          }\n\n          function showColorpickerTemplate() {\n\n            if (!colorpickerTemplate.hasClass('colorpicker-visible')) {\n              update();\n              colorpickerTemplate\n                .addClass('colorpicker-visible')\n                .css(getColorpickerTemplatePosition());\n              emitEvent('colorpicker-shown');\n\n              if (inline === false) {\n                // register global mousedown event to hide the colorpicker\n                $document.on('mousedown', documentMousedownHandler);\n              }\n\n              if (attrs.colorpickerIsOpen) {\n                $scope[attrs.colorpickerIsOpen] = true;\n                if (!$scope.$$phase) {\n                  $scope.$digest(); //trigger the watcher to fire\n                }\n              }\n            }\n          }\n\n          if (inline === false) {\n            elem.on('click', showColorpickerTemplate);\n          } else {\n            showColorpickerTemplate();\n          }\n\n          colorpickerTemplate.on('mousedown', function (event) {\n            event.stopPropagation();\n            event.preventDefault();\n          });\n\n          function emitEvent(name) {\n            if (ngModel) {\n              $scope.$emit(name, {\n                name: attrs.ngModel,\n                value: ngModel.$modelValue\n              });\n            }\n          }\n\n          function hideColorpickerTemplate() {\n            if (colorpickerTemplate.hasClass('colorpicker-visible')) {\n              colorpickerTemplate.removeClass('colorpicker-visible');\n              emitEvent('colorpicker-closed');\n              // unregister the global mousedown event\n              $document.off('mousedown', documentMousedownHandler);\n\n              if (attrs.colorpickerIsOpen) {\n                $scope[attrs.colorpickerIsOpen] = false;\n                if (!$scope.$$phase) {\n                  $scope.$digest(); //trigger the watcher to fire\n                }\n              }\n            }\n          }\n\n          colorpickerTemplate.find('button').on('click', function () {\n            hideColorpickerTemplate();\n          });\n\n          if (attrs.colorpickerIsOpen) {\n            $scope.$watch(attrs.colorpickerIsOpen, function(shouldBeOpen) {\n\n              if (shouldBeOpen === true) {\n                showColorpickerTemplate();\n              } else if (shouldBeOpen === false) {\n                hideColorpickerTemplate();\n              }\n\n            });\n          }\n        }\n      };\n    }]);\n"],"sourceRoot":"/source/"}